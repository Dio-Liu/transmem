#
# Note: this should be included at the end of a benchmark-specific Makefile.
# Otherwise, $(PROG), $(SRCS), and $(LIBSRCS) won't be defined.
#

#
# Let the user choose 32-bit or 64-bit compilation
#
BITS ?= 32

#
# Set up the output directory
#
ODIR          := ../obj$(BITS)/$(PROG)
output_folder := $(shell mkdir -p $(ODIR))

#
# Tools
#
CXX = g++
LD  = g++

#
# Names of files that the compiler generates
#
EXEFILES = $(ODIR)/$(PROG)
OFILES   = $(patsubst %, $(ODIR)/%.o, $(SRCS) $(LIBSRCS))
DEPS     = $(patsubst %, $(ODIR)/%.d, $(SRCS) $(LIBSRCS))

#
# These lines tell where to find a transactional STL.  We do our best to
# figure it out automatically, but assume there's a very new GCC in the path,
# and that it was used to build the STL
#
GCC_HOME    := $(shell which gcc | sed 's+/bin/gcc++')
TM_STL_HOME := ../../../libs/libstdc++_tm
TM_STL_PATH := $(shell cd $(TM_STL_HOME); pwd)

#
# Flags
#
# NB: we must += these, since the parent Makefile might have put in some
# custom flags.
#
CXXFLAGS += -I../lib -I../ -Wall -Wextra -g -fgnu-tm -O2 -std=c++11 -MMD -m$(BITS)
LDFLAGS  += -lpthread -litm -m$(BITS) -fgnu-tm

#
# Flags for transactional STL
#
CXXFLAGS      += -nostdinc -I/usr/include/ -m$(BITS) -fgnu-tm
CXXFLAGS      += -I$(TM_STL_PATH)/libstdc++-v3/include
CXXFLAGS      += -I$(TM_STL_PATH)/libstdc++-v3/include/x86_64-unknown-linux-gnu
CXXFLAGS      += -I$(TM_STL_PATH)/libstdc++-v3/libsupc++
CXXFLAGS      += -I$(GCC_HOME)/lib/gcc/x86_64-unknown-linux-gnu/6.0.0/include

LDFLAGS       += -L$(TM_STL_PATH)/libstdc++-v3/src/obj$(BITS)
LDFLAGS       += -Wl,-rpath,$(TM_STL_PATH)/libstdc++-v3/src/obj$(BITS)
LDFLAGS       += -lstdc++

#
# Target Info
#
.DEFAULT_GOAL = all
.PRECIOUS: $(OFILES)
.PHONY: all clean

#
# Targets
#

all: $(EXEFILES)

clean:
	rm -rf $(ODIR)

#
# Rules for building .o files from sources
#

$(ODIR)/%.o: %.cc
	$(CXX) $(CXXFLAGS) -c $< -o $@

$(ODIR)/%.o: ../lib/%.cc
	$(CXX) $(CXXFLAGS) -c $< -o $@

#
# Rules for building executables
#

$(EXEFILES): $(OFILES)
	$(LD) $^ $(LDFLAGS) -o $@

#
# Include dependencies
#
-include $(DEPS)
